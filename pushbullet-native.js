// Generated by CoffeeScript 1.9.2
var PushBullet, PushbulletNative, clor, forever, fs, meow, notifier, npath, os, persist, readline,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

os = require('os');

fs = require('fs');

npath = require('path');

readline = require('readline');

PushBullet = require('pushbullet');

notifier = require('node-notifier');

clor = require('clor');

persist = require('node-persist');

forever = require('forever');

meow = require('meow');

module.exports = PushbulletNative = (function() {
  PushbulletNative.prototype.pusher = void 0;

  PushbulletNative.prototype.rl = void 0;

  PushbulletNative.prototype.isMaster = process.env.PBN_SLAVE !== "true";

  PushbulletNative.prototype.cli = void 0;

  function PushbulletNative() {
    var mode;
    this.cmd();
    mode = this.cli.input[0];
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    persist.initSync();
    switch (mode) {
      case 'start':
      case void 0:
        if (this.isMaster) {
          this.welcome();
        }
        this.auth((function(_this) {
          return function(token) {
            return _this.daemonize(function() {
              return _this.listen(token);
            });
          };
        })(this));
        break;
      case 'remove-token':
        persist.removeItemSync('token');
        clor.green("âœ“ Done").log();
        process.exit();
        break;
      case "sound":
        if (parseInt(this.cli.input[1])) {
          clor.green("âœ“ Sound enabled").log();
          persist.setItemSync("sound", true);
        } else {
          clor.green("âœ“ Sound disabled").log();
          persist.removeItemSync("sound");
        }
        process.exit();
        break;
      case "subtitle":
        if (os.type() === !"Darwin") {
          clor.red("â¨‰ This setting only works on OSX").log();
        }
        if (parseInt(this.cli.input[1])) {
          clor.green("âœ“ Subtitle enabled").log();
          persist.setItemSync("sound", true);
        } else {
          clor.green("âœ“ Subtitle disabled").log();
          persist.removeItemSync("sound");
        }
        process.exit();
        break;
      case "timeout":
        if (os.type() === !"Linux") {
          clor.red("â¨‰ This setting only works on linux").log();
        }
        if (parseInt(this.cli.input[1])) {
          console.log(clor.green("âœ“ Timeout set to ") + clor.yellow(parseInt(this.cli.input[1])));
          persist.setItemSync("timeout", parseInt(this.cli.input[1]));
        } else {
          clor.green("âœ“ Timeout disabled").log();
          persist.removeItemSync("timeout");
        }
        process.exit();
        break;
      default:
        this.cli.showHelp();
        process.exit();
    }
  }

  PushbulletNative.prototype.cmd = function() {
    var appname;
    appname = clor.blue('pushbullet-native').toString();
    this.cli = meow({
      help: ['Usage', '  ' + appname, '     Start pushbullet-native', '  ' + appname + ' ' + clor.yellow('stop'), '     Stop pushbullet-native', '  ' + appname + ' ' + clor.yellow('remove-token'), '     Remove token (if it exists).', '     Run the program again normally afterwards to enter new token.', '  ' + appname + ' ' + clor.yellow('sound ') + clor.green('0/1'), '     Enable disable notification sounds (multiplatform). Default: 1', '  ' + appname + ' ' + clor.yellow('subtitle ') + clor.green('0/1'), '     Use app name as notification subtitle. (mac only). Default: 0', '  ' + appname + ' ' + clor.yellow('timeout ') + clor.green('10000'), '     Amount of time to show. (linux only). 0 to disable. Default: 0', '', 'Flags', '  ' + clor.yellow('--foreground'), '     Force pushbullet-native to run in foreground']
    });
    if (indexOf.call(this.cli.flags, 'help') >= 0 || this.cli.input[0] === 'help') {
      this.cli.showHelp();
      return process.exit();
    }
  };

  PushbulletNative.prototype.daemonize = function(cb) {
    if (this.cli.flags.foreground) {
      this.isMaster = false;
      console.log(clor.yellow.bold("WARNING") + clor.yellow(": pushbullet-native is running in the foreground.\r\nQuit this program and your notifications will cease."));
    }
    if (this.isMaster) {
      forever.startDaemon("index.js", {
        uid: 'pbn',
        env: {
          PBN_SLAVE: 'true'
        }
      });
    }
    if (!this.isMaster) {
      return cb();
    } else {
      clor.green('PushBullet Native is now running in the background.').log();
      return process.exit();
    }
  };

  PushbulletNative.prototype.writeIcon = function(data) {
    var buffer, path;
    buffer = new Buffer(data, 'base64');
    path = npath.join(os.tmpdir(), 'psn-' + Math.round(Math.random() * 100000000) + '.jpg');
    fs.writeFileSync(path, buffer);
    console.log('wrote image to ' + path);
    return path;
  };

  PushbulletNative.prototype.getNotificationIdentifier = function(push) {
    return push.package_name + push.source_user_iden + push.notification_id;
  };

  PushbulletNative.prototype.notify = function(push) {
    var center, notification, notify;
    notification = {
      title: os.type() === "Darwin" && !persist.getItemSync("subtitle") ? push.title : push.application_name + " - " + push.title,
      'message': push.body,
      icon: this.writeIcon(push.icon),
      wait: false
    };
    if (persist.getItem("sound")) {
      notification.sound = true;
    }
    notify = function() {
      console.log(notification);
      return notifier.notify(notification, function(err, response) {
        return console.log(err, response);
      });
    };
    switch (os.type()) {
      case "Darwin":
        notification.subtitle = push.application_name;
        if (persist.getItem("sound")) {
          notification.sound = 'Ping';
        }
        notification.group = this.getNotificationIdentifier(push);
        console.log(notification);
        center = new notifier.NotificationCenter({
          customPath: npath.join(__dirname, 'bin/Pushbullet.app/Contents/MacOS/Pushbullet')
        });
        notify = function() {
          return center.notify(notification, function(err, response) {
            return console.log(err, response);
          });
        };
        break;
      case "Linux":
        console.log('linux. timeout =', persist.getItemSync("timeout"));
        if (persist.getItemSync("timeout")) {
          notification['expire-time'] = persist.getItemSync("timeout");
        }
    }
    return notify();
  };

  PushbulletNative.prototype.listen = function(token) {
    var reconnect, stream;
    this.pusher = new PushBullet(token);
    stream = this.pusher.stream();
    stream.connect();
    stream.on('push', (function(_this) {
      return function(push) {
        console.log(push.type);
        switch (push.type) {
          case "mirror":
            return _this.notify(push);
          case "dismissal":
            switch (os.type()) {
              case "Darwin":
                console.log('remove', _this.getNotificationIdentifier(push));
                return new notifier.NotificationCenter({}).notify({
                  remove: _this.getNotificationIdentifier(push)
                }, function(err, response) {
                  debugger;
                  return console.log(err, response);
                });
            }
        }
      };
    })(this));
    stream.on('connect', function() {
      return clor.green('stream connected').log();
    });
    reconnect = function(error) {
      clor.blue('stream closed. reconnect in 2 secs').log();
      return setTimeout(function() {
        clor.blue('retrying...');
        return stream.connect();
      }, 2000);
    };
    return stream.on('close', reconnect);
  };

  PushbulletNative.prototype.welcome = function() {
    var emoji;
    emoji = os.type() === 'Darwin' ? ' ðŸ”„ ' : '';
    console.log(emoji.substring(1) + clor.bold("PushBullet Native") + emoji);
    clor.italic("Build by Jari Zwarts").log();
    return console.log();
  };

  PushbulletNative.prototype.auth = function(cb) {
    if (!persist.getItemSync("token")) {
      clor.bold.red("No PushBullet account found!").log();
      clor.blue("Please enter a access token. (see https://www.pushbullet.com/#settings/account )").log();
      return this.rl.question("Access token: ", (function(_this) {
        return function(answer) {
          clor.green("âœ“ Alright\r\n").log();
          persist.setItemSync("token", answer);
          return cb(answer);
        };
      })(this));
    } else {
      return cb(persist.getItemSync("token"));
    }
  };

  return PushbulletNative;

})();
